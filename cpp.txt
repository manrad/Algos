def solution(X, Y, D):
    # write your code in Python 3.6
    pass
    if X == Y :
        return 0
    
    sumJ = X 
    
    noStep = 0;
    if sumJ >= Y :
        return 1
    else:
		
        return noStep
    
    return noStep
	
	-__________________________________________
# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

def solution(X, A):
    # write your code in Python 3.6
    pass
    lenA = len(A)
    
    sumT = (X * (X + 1))//2
    
    endIndex =  lenA - X + 1
    i = 0
    #print(totalsum)
    while i < endIndex:
        
        if sum(A[i:i+X]) == sumT :
            return i+X-1
        i = i + 1
        
    return -1
	
	if isMinLevel:
    return values.index(min(values))
else:
    return values.index(max(values))
	
_____________________________________________________________________________
# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

def solution(S):
    # write your code in Python 3.6
    pass
    stackA = []
    if len(S)%2 == 1:
        return 0
    
    lenS = len(S) - 1
    i = 0
    while i < len(S)//2:
        if S[i] == '[' or S[i] == '{' or S[i] == '(':
            stackA.append(S[i])
        elif S[i] == ']':
            if stackA:
                if stackA.pop() != '[':
                    return 0
			else:
				return 0
        elif S[i] == ')':
            if stackA:
                if stackA.pop() != '(':
                    return 0
			else:
				return 0
        elif S[i] == '}':
            if stackA:
                if stackA.pop() != '{':
                    return 0
			else:
				return 0
        i = i + 1
    return 1

	----------------------------------------
	

// you can use includes, for example:
// #include <algorithm>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

vector<int> solution(vector<int> &A, int K) {
    // write your code in C++14 (g++ 6.2.0)
    int sizeA =  A.size() - 1;
    vector<int> B(A);
    if (!K){
        return A; 
    }
    int quot = K;
    if (K > sizeA){
        quot = int(K%A.size());
    }
    int rem = sizeA%quot;
    // first rem items should be at the end 
    if(A.size() == K){
        return A;
    }
 
    int sum = 0;
    for(int i=0; i < A.size(); i++){
        sum = sum + A[i];
    }
    if(sum == 0){
        return A;
    }
    
    int cycleCount =  quot;
    int posToCopy = A.size() - cycleCount;
    int ix = 0;
    for (int i=posToCopy; i < A.size(); i++){
        B[ix] = A[i];   
        ix = ix + 1;
    }
    ix = 0;
    for (int i=quot; i < A.size(); i++){
        B[i] = A[ix];   
        ix = ix + 1;
    }
    return B;
}

________________________________________________________________________________________________________
// you can use includes, for example:
// #include <algorithm>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;



// you can use includes, for example:
// #include <algorithm>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;



void merge(vector<int> &A, int aLeft, int aMiddle, int aRight) 
{ 
    int i, j, k; 
    int n1 = aMiddle - aLeft + 1; 
    int n2 =  aRight - aMiddle; 
  
    /* create temp arrays */
    int leftTemp[n1], rightTemp[n2]; 
  
    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++) 
        leftTemp[i] = A[aLeft + i]; 
    for (j = 0; j < n2; j++) 
        rightTemp[j] = A[aMiddle + 1+ j]; 
  
    // Initializing required subarrays
    i = 0;
    j = 0;
    k = aLeft;
    while (i < n1 && j < n2) 
    { 
        if (leftTemp[i] <= rightTemp[j]) 
        { 
            A[k] = leftTemp[i]; 
            i++; 
        } 
        else
        { 
            A[k] = rightTemp[j]; 
            j++; 
        } 
        k++; 
    } 
  
    /* Copy leftTemp */
    while (i < n1) 
    { 
        A[k] = leftTemp[i]; 
        i++; 
        k++; 
    } 
  
    /* Copy right Temp */
    while (j < n2) 
    { 
        A[k] = rightTemp[j]; 
        j++; 
        k++; 
    } 
} 
  
/* l is for left index and r is right index of the 
   sub-array of arr to be sorted */
void mergeSort(vector<int>&A , int aLeft, int aRight) 
{ 
    if (aLeft < aRight) 
    { 
        // Same as (l+r)/2, but avoids overflow for 
        // large l and h 
        int aMiddle = aLeft + (aRight-aLeft)/2; 
  
        // Sort first and second halves 
        mergeSort(A, aLeft, aMiddle); 
        mergeSort(A, aMiddle+1, aRight); 
  
        merge(A, aLeft, aMiddle, aRight); 
    } 
} 


int solution(vector<int> &A) {
    // write your code in C++14 (g++ 6.2.0)
    int sizeA = A.size();
    vector<int> B(A);
    // find max and min in an array
    int min = A[0];
    int max = A[sizeA/2];
    
    //cout << "Min" << min << "max" << max;
    
    for (int i=0; i< sizeA; i++){
        if (min > A[i]){
            min = A[i];
        }
        
        if(max < A[i]){
            max = A[i];
        }
    }
//    cout << "Min" << min << "max" << max;
    if(max < 0){
        return 1;
    }
    //sequence array and remove duplicates
    mergeSort(B, 0, sizeA - 1);
  /*  
    for(int op=0; op < sizeA;op++){
        cout << B[op];
    }
    */
    for(int i = 0; i < (int)B.size()-1;i++){
        if(abs(B[i] - B[i+1]) > 1){
            return (B[i] + 1);   
        }
    }
    
    return max+1;
}

________________________________________________________________________________________________________________________________

